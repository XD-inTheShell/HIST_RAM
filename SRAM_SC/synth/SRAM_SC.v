// SRAM_SC.v

// Generated using ACDS version 19.4 64

`timescale 1 ps / 1 ps
module SRAM_SC (
		output wire        clock_bridge_0_out_clk_clk,                   //            clock_bridge_0_out_clk.clk
		input  wire        clk_clk,                                      //                               clk.clk
		input  wire        iopll_0_reset_reset,                          //                     iopll_0_reset.reset
		output wire        iopll_0_locked_export,                        //                    iopll_0_locked.export
		output wire        master_0_master_reset_reset,                  //             master_0_master_reset.reset
		output wire [31:0] master_0_master_address,                      //                   master_0_master.address
		input  wire [31:0] master_0_master_readdata,                     //                                  .readdata
		output wire        master_0_master_read,                         //                                  .read
		output wire        master_0_master_write,                        //                                  .write
		output wire [31:0] master_0_master_writedata,                    //                                  .writedata
		input  wire        master_0_master_waitrequest,                  //                                  .waitrequest
		input  wire        master_0_master_readdatavalid,                //                                  .readdatavalid
		output wire [3:0]  master_0_master_byteenable,                   //                                  .byteenable
		output wire        master_1_master_reset_reset,                  //             master_1_master_reset.reset
		output wire [31:0] master_1_master_address,                      //                   master_1_master.address
		input  wire [31:0] master_1_master_readdata,                     //                                  .readdata
		output wire        master_1_master_read,                         //                                  .read
		output wire        master_1_master_write,                        //                                  .write
		output wire [31:0] master_1_master_writedata,                    //                                  .writedata
		input  wire        master_1_master_waitrequest,                  //                                  .waitrequest
		input  wire        master_1_master_readdatavalid,                //                                  .readdatavalid
		output wire [3:0]  master_1_master_byteenable,                   //                                  .byteenable
		input  wire        reset_reset,                                  //                             reset.reset
		output wire        s10_user_rst_clkgate_2_ninit_done_ninit_done  // s10_user_rst_clkgate_2_ninit_done.ninit_done
	);

	wire    clock_in_out_clk_clk;     // clock_in:out_clk -> iopll_0:refclk
	wire    iopll_0_outclk0_clk;      // iopll_0:outclk_0 -> [clock_bridge_0:in_clk, master_0:clk_clk, master_1:clk_clk]
	wire    reset_in_out_reset_reset; // reset_in:out_reset -> [master_0:clk_reset_reset, master_1:clk_reset_reset]

	SRAM_SC_clock_bridge_0 clock_bridge_0 (
		.in_clk  (iopll_0_outclk0_clk),        //   input,  width = 1,  in_clk.clk
		.out_clk (clock_bridge_0_out_clk_clk)  //  output,  width = 1, out_clk.clk
	);

	SRAM_SC_clock_in clock_in (
		.in_clk  (clk_clk),              //   input,  width = 1,  in_clk.clk
		.out_clk (clock_in_out_clk_clk)  //  output,  width = 1, out_clk.clk
	);

	SRAM_SC_iopll_0 iopll_0 (
		.rst      (iopll_0_reset_reset),   //   input,  width = 1,   reset.reset
		.refclk   (clock_in_out_clk_clk),  //   input,  width = 1,  refclk.clk
		.locked   (iopll_0_locked_export), //  output,  width = 1,  locked.export
		.outclk_0 (iopll_0_outclk0_clk)    //  output,  width = 1, outclk0.clk
	);

	SRAM_SC_master_0 master_0 (
		.clk_clk              (iopll_0_outclk0_clk),           //   input,   width = 1,          clk.clk
		.clk_reset_reset      (reset_in_out_reset_reset),      //   input,   width = 1,    clk_reset.reset
		.master_reset_reset   (master_0_master_reset_reset),   //  output,   width = 1, master_reset.reset
		.master_address       (master_0_master_address),       //  output,  width = 32,       master.address
		.master_readdata      (master_0_master_readdata),      //   input,  width = 32,             .readdata
		.master_read          (master_0_master_read),          //  output,   width = 1,             .read
		.master_write         (master_0_master_write),         //  output,   width = 1,             .write
		.master_writedata     (master_0_master_writedata),     //  output,  width = 32,             .writedata
		.master_waitrequest   (master_0_master_waitrequest),   //   input,   width = 1,             .waitrequest
		.master_readdatavalid (master_0_master_readdatavalid), //   input,   width = 1,             .readdatavalid
		.master_byteenable    (master_0_master_byteenable)     //  output,   width = 4,             .byteenable
	);

	SRAM_SC_master_1 master_1 (
		.clk_clk              (iopll_0_outclk0_clk),           //   input,   width = 1,          clk.clk
		.clk_reset_reset      (reset_in_out_reset_reset),      //   input,   width = 1,    clk_reset.reset
		.master_reset_reset   (master_1_master_reset_reset),   //  output,   width = 1, master_reset.reset
		.master_address       (master_1_master_address),       //  output,  width = 32,       master.address
		.master_readdata      (master_1_master_readdata),      //   input,  width = 32,             .readdata
		.master_read          (master_1_master_read),          //  output,   width = 1,             .read
		.master_write         (master_1_master_write),         //  output,   width = 1,             .write
		.master_writedata     (master_1_master_writedata),     //  output,  width = 32,             .writedata
		.master_waitrequest   (master_1_master_waitrequest),   //   input,   width = 1,             .waitrequest
		.master_readdatavalid (master_1_master_readdatavalid), //   input,   width = 1,             .readdatavalid
		.master_byteenable    (master_1_master_byteenable)     //  output,   width = 4,             .byteenable
	);

	SRAM_SC_reset_in reset_in (
		.in_reset  (reset_reset),              //   input,  width = 1,  in_reset.reset
		.out_reset (reset_in_out_reset_reset)  //  output,  width = 1, out_reset.reset
	);

	SRAM_SC_s10_user_rst_clkgate_2 s10_user_rst_clkgate_2 (
		.ninit_done (s10_user_rst_clkgate_2_ninit_done_ninit_done)  //  output,  width = 1, ninit_done.ninit_done
	);

endmodule
